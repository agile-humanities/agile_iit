<?php

/**
 * @file
 * The Agile IIT module install hooks.
 */

/**
 * Implements hook_enable().
 *
 * We create the agile_iit flag on enable, so hook implementations in flag
 * module will fire correctly, as the APIs are not available on install.
 */
function agile_iit_enable() {
  // Load the flag API in case we want to use it when enabling.
  include_once drupal_get_path('module', 'flag') . '/flag.module';

  $existing_flags = flag_get_flags();
  if (!isset($existing_flags['selected_images'])) {
    // Only install the flag if it doesn't exist already.
    $flag = flag_flag::factory_by_entity_type('node');
    $configuration = array(
      'name' => 'selected_images',
      'global' => 0,
      'show_in_links' => array(
        'full' => 1,
        'teaser' => 1,
      ),
      'show_on_form' => 1,
      // The following UI labels aren't wrapped in t() because they are written
      // to the DB in English. They are passed to t() later, thus allowing for
      // multilingual sites.
      'title' => 'Selected Images',
      'flag_short' => 'Select this',
      'flag_long' => 'Add this node to your selected',
      'flag_message' => 'This node has been added to your selected',
      'unflag_short' => 'Unselect this',
      'unflag_long' => 'Remove this post from your selected',
      'unflag_message' => 'This post has been removed from your selected',
      'types' => _agile_iit_install_get_suggested_node_types(),
    );
    $flag->form_input($configuration);
    $flag->save();

    // Clear the flag cache so the new permission is seen by core.
    drupal_static_reset('flag_get_flags');

    // Grant permissions.
    $permissions = array('flag selected_images', 'unflag selected_images');
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions);
  }
}

/**
 * Returns some node types to which the demonstration 'selected' flag will
 * apply.
 */
function _agile_iit_install_get_suggested_node_types() {
  $preferred = array('article', 'story', 'forum', 'blog', 'image');
  $existing = array_intersect($preferred, array_keys(node_type_get_types()));
  if (!$existing) {
    // As a last resort, take the first preference.
    return array($preferred[0]);
  }
  return $existing;
}

/**
 * Implements hook_uninstall().
 */
function agile_iit_uninstall() {
  $ournewtype = 'iit_detail_comparison';
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => $ournewtype));
  $nodeids = array();
  foreach ($result as $row) {
    $nodeids[] = $row->nid;
  }
  node_delete_multiple($nodeids);
  agile_iit_delete_custom_fields();
  node_type_delete($ournewtype);
  field_purge_batch(500);
}

/**
 * Implements hook_install().
 */
function agile_iit_install() {
  node_types_rebuild();
  $types = node_type_get_types();
  $types = node_type_get_names();
  if ( !in_array('iit_detail_comparison', $types )) {
    $new_type = array(
      'name' => t('IIT Detail Comparison'),
      'base' => 'iit_detail_comparison',
      'description' => t('A detail comparison.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'type' => 'iit_detail_comparison',
    );
    $new_type = node_type_set_defaults($new_type);
    node_type_save( $new_type );
  }
  iit_add_custom_fields();

  $help_id = agile_iit_create_page_node();
  variable_set('agile_iit_help_node_id', $help_id);
}

function _agile_iit_installed_fields() {
  $t = get_t();
  return array(
    'iit_comments' => array(
      'field_name' => 'iit_comments',
      'label' => 'Comments (IIT Detail)',
      'type' => 'text_long',
    ),
    'iit_detail_1' => array(
      'field_name' => 'iit_detail_1',
      'label' => $t('Image Detail 1'),
      'type' => 'image',
    ),
    'iit_detail_2' => array(
      'field_name' => 'iit_detail_2',
      'label' => $t('Image Detail 2'),
      'type' => 'image',
    ),
    'iit_nid_1' => array(
      'field_name' => 'iit_nid_1',
      'label' => $t('Node of Image 1'),
      'type' => 'entityreference',
    ),
    'iit_nid_2' => array(
      'field_name' => 'iit_nid_2',
      'label' => $t('Node of Image 2'),
      'type' => 'entityreference',
    ),
    'iit_crop_data_1' => array(
      'field_name' => 'iit_crop_data_1',
      'label' => $t('Crop data from section 1'),
      'type' => 'text_long',
    ),
    'iit_crop_data_2' => array(
      'field_name' => 'iit_crop_data_2',
      'label' => $t('Crop data from section 2'),
      'type' => 'text_long',
    ),
  );

}

function _agile_iit_installed_instances() {
  $t = get_t();
  return array(
    'iit_comments' => array(
      'field_name' => 'iit_comments',
      'label' => $t('Detail Comments'),
      'widget' => array(
        'type' => 'textarea',
      ),
    ),
    'iit_detail_1' => array(
      'field_name' => 'iit_detail_1',
      'label' => $t('Image Detail 1'),
      'settings' => array('file_extensions' => 'jpg, jpeg, gif'),
    ),
    'iit_detail_2' => array(
      'field_name' => 'iit_detail_2',
      'label' => $t('Image Detail 2'),
      'settings' => array('file_extensions' => 'jpg, jpeg, gif'),
    ),
    'iit_nid_1' => array(
      'field_name' => 'iit_nid_1',
      'label' => $t('Node of Image 1'),
    ),
    'iit_nid_2' => array(
      'field_name' => 'iit_nid_2',
      'label' => $t('Node of Image 2'),
    ),
    'iit_crop_data_1' => array(
      'field_name' => 'iit_crop_data_1',
      'label' => $t('Crop data from section 1'),
    ),
    'iit_crop_data_2' => array(
      'field_name' => 'iit_crop_data_2',
      'label' => $t('Crop data from section 2'),
    ),
  );
}

function iit_add_custom_fields() {
  foreach (_agile_iit_installed_fields() as $field) {
    field_create_field($field);
  }
  foreach (_agile_iit_installed_instances() as $fieldinstance) {
    $fieldinstance['entity_type'] = 'node';
    $fieldinstance['bundle'] = 'iit_detail_comparison';
    field_create_instance($fieldinstance);

  }
}

function agile_iit_delete_custom_fields() {
  foreach (array_keys(_agile_iit_installed_fields()) as $field) {
    field_delete_field($field);
  }
  $instances = field_info_instances('node', 'iit_detail_comparison');
  foreach ($instances as $instance_name => $fieldinstance) {
    field_delete_instance($fieldinstance);
  }
}

/**
 * Add the custom node type and fields for Detail Comparisons.
*/
function agile_iit_update_7000() {
  node_types_rebuild();
  $types = node_type_get_types();
  iit_add_custom_fields();
}

function agile_iit_update_7001() {
  $help_id = agile_iit_create_page_node();
  variable_set('agile_iit_help_node_id', $help_id);
}

function agile_iit_create_page_node() {
  $values = array(
    'type' => 'page',
    'uid' => $GLOBALS['user']->uid,
    'status' => 0,
    'comment' => 1,
    'promote' => 0,
  );
  $entity = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $entity);
  $wrapper->title->set('Agile IIT Help Page');
  $wrapper->body->set(array('value' => "<strong>Set default text here.</strong>"));
  $wrapper->save(true);
  entity_save('node', $entity);
  return $wrapper->getIdentifier();
}


